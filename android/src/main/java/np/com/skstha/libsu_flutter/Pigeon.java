// Autogenerated from Pigeon (v8.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package np.com.skstha.libsu_flutter;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {
  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
      "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ShellOut {
    private @NonNull List<String> stdout;

    public @NonNull List<String> getStdout() {
      return stdout;
    }

    public void setStdout(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"stdout\" is null.");
      }
      this.stdout = setterArg;
    }

    private @NonNull List<String> stderr;

    public @NonNull List<String> getStderr() {
      return stderr;
    }

    public void setStderr(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"stderr\" is null.");
      }
      this.stderr = setterArg;
    }

    private @NonNull Boolean success;

    public @NonNull Boolean getSuccess() {
      return success;
    }

    public void setSuccess(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"success\" is null.");
      }
      this.success = setterArg;
    }

    /**
     * the return code of the last operation in the shell. If the job is
     * executed properly, the code should range from 0-255. If the job fails to
     * execute, it will return JOB_NOT_EXECUTED (-1).
     */
    private @NonNull Long code;

    public @NonNull Long getCode() {
      return code;
    }

    public void setCode(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"code\" is null.");
      }
      this.code = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ShellOut() {}

    public static final class Builder {

      private @Nullable List<String> stdout;

      public @NonNull Builder setStdout(@NonNull List<String> setterArg) {
        this.stdout = setterArg;
        return this;
      }

      private @Nullable List<String> stderr;

      public @NonNull Builder setStderr(@NonNull List<String> setterArg) {
        this.stderr = setterArg;
        return this;
      }

      private @Nullable Boolean success;

      public @NonNull Builder setSuccess(@NonNull Boolean setterArg) {
        this.success = setterArg;
        return this;
      }

      private @Nullable Long code;

      public @NonNull Builder setCode(@NonNull Long setterArg) {
        this.code = setterArg;
        return this;
      }

      public @NonNull ShellOut build() {
        ShellOut pigeonReturn = new ShellOut();
        pigeonReturn.setStdout(stdout);
        pigeonReturn.setStderr(stderr);
        pigeonReturn.setSuccess(success);
        pigeonReturn.setCode(code);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(stdout);
      toListResult.add(stderr);
      toListResult.add(success);
      toListResult.add(code);
      return toListResult;
    }

    static @NonNull ShellOut fromList(@NonNull ArrayList<Object> list) {
      ShellOut pigeonResult = new ShellOut();
      Object stdout = list.get(0);
      pigeonResult.setStdout((List<String>) stdout);
      Object stderr = list.get(1);
      pigeonResult.setStderr((List<String>) stderr);
      Object success = list.get(2);
      pigeonResult.setSuccess((Boolean) success);
      Object code = list.get(3);
      pigeonResult.setCode((code == null) ? null : ((code instanceof Integer) ? (Integer) code : (Long) code));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);

    void error(Throwable error);
  }

  private static class LibSuApiCodec extends StandardMessageCodec {
    public static final LibSuApiCodec INSTANCE = new LibSuApiCodec();

    private LibSuApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return ShellOut.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof ShellOut) {
        stream.write(128);
        writeValue(stream, ((ShellOut) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface LibSuApi {

    void getPlatformVersion(Result<String> result);

    void configure(@NonNull Boolean mountMaster, @NonNull Long timeoutInSeconds, @NonNull Boolean debug, Result<Void> result);

    void isAppGrantedRoot(Result<Boolean> result);

    void createShell(Result<Long> result);

    void getShellStatus(Result<Long> result);

    void isRoot(Result<Boolean> result);

    void waitAndClose(@NonNull Long timeoutInSeconds, Result<Boolean> result);

    void waitForeverAndClose(Result<Void> result);

    void close(Result<Void> result);

    void exec(@NonNull String cmd, Result<ShellOut> result);

    void submit(@NonNull String cmd, Result<ShellOut> result);

    /** The codec used by LibSuApi. */
    static MessageCodec<Object> getCodec() {
      return LibSuApiCodec.INSTANCE;
    }
    /**Sets up an instance of `LibSuApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, LibSuApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibSuApi.getPlatformVersion", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Result<String> resultCallback = 
                      new Result<String>() {
                        public void success(String result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.getPlatformVersion(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibSuApi.configure", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Boolean mountMasterArg = (Boolean) args.get(0);
                  if (mountMasterArg == null) {
                    throw new NullPointerException("mountMasterArg unexpectedly null.");
                  }
                  Number timeoutInSecondsArg = (Number) args.get(1);
                  if (timeoutInSecondsArg == null) {
                    throw new NullPointerException("timeoutInSecondsArg unexpectedly null.");
                  }
                  Boolean debugArg = (Boolean) args.get(2);
                  if (debugArg == null) {
                    throw new NullPointerException("debugArg unexpectedly null.");
                  }
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.configure(mountMasterArg, (timeoutInSecondsArg == null) ? null : timeoutInSecondsArg.longValue(), debugArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibSuApi.isAppGrantedRoot", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Result<Boolean> resultCallback = 
                      new Result<Boolean>() {
                        public void success(Boolean result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.isAppGrantedRoot(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibSuApi.createShell", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Result<Long> resultCallback = 
                      new Result<Long>() {
                        public void success(Long result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.createShell(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibSuApi.getShellStatus", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Result<Long> resultCallback = 
                      new Result<Long>() {
                        public void success(Long result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.getShellStatus(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibSuApi.isRoot", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Result<Boolean> resultCallback = 
                      new Result<Boolean>() {
                        public void success(Boolean result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.isRoot(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibSuApi.waitAndClose", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number timeoutInSecondsArg = (Number) args.get(0);
                  if (timeoutInSecondsArg == null) {
                    throw new NullPointerException("timeoutInSecondsArg unexpectedly null.");
                  }
                  Result<Boolean> resultCallback = 
                      new Result<Boolean>() {
                        public void success(Boolean result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.waitAndClose((timeoutInSecondsArg == null) ? null : timeoutInSecondsArg.longValue(), resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibSuApi.waitForeverAndClose", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.waitForeverAndClose(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibSuApi.close", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.close(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibSuApi.exec", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String cmdArg = (String) args.get(0);
                  if (cmdArg == null) {
                    throw new NullPointerException("cmdArg unexpectedly null.");
                  }
                  Result<ShellOut> resultCallback = 
                      new Result<ShellOut>() {
                        public void success(ShellOut result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.exec(cmdArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.LibSuApi.submit", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String cmdArg = (String) args.get(0);
                  if (cmdArg == null) {
                    throw new NullPointerException("cmdArg unexpectedly null.");
                  }
                  Result<ShellOut> resultCallback = 
                      new Result<ShellOut>() {
                        public void success(ShellOut result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.submit(cmdArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
